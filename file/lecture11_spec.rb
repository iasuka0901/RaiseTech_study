# システム設定やソフトウェアのインストール状態を確認するためのテストスクリプト

# ファイルを読み込み、テスト実行に必要な設定やメソッドを使えるようにする
require 'spec_helper'

#ポート番号80をlisten_port80という変数に代入。テストでこのポート番号を使用
listen_port80 = 80

# 以下のdoとendは、Rubyのコードブロックを定義するための構文
# doはRubyでコードブロックを開始するためのキーワード
# endはRubyでコードブロックを終了するためのキーワード

# ------------------------------------------------------------------------
# gitがインストールされていること
# ------------------------------------------------------------------------

# describeはテスト対象を指定するためのメソッド。package('git')でgitというパッケージがテスト対象。gitパッケージの状態をチェック
# gitパッケージがインストールされていることを確認。be_installedマッチャーを使ってテストする
describe package ('git') do
# itはテストの具体的な条件を定義。ブロック内でshould be_installedはgitパッケージがシステムにインストールされているかどうかを確認
  it { should be_installed }
end

# ------------------------------------------------------------------------
# ruby のバージョンは3.2.3であること
# ------------------------------------------------------------------------

# ruby -vコマンドを実行し、その出力にruby 3.2.3が含まれていることを確認。Rubyのバージョンが3.2.3であることをテストする
# describe: テストの対象となるコードやコマンドを記述するための構文。ommand('ruby -v'): 実行するコマンドを指定。コマンドラインでruby -vを実行してRubyのバージョン情報を取得
describe command('ruby -v') do
  # itsは、オブジェクトの属性（プロパティやメソッドの出力など）をテストするために使用
  # コマンドの標準出力（stdout）を参照。コマンドが出力した内容を検査するためのもの
  # { should match 'ruby 3.2.3' }: 標準出力がruby 3.2.3という文字列を含んでいるかを確認
  # matchは正規表現を使って出力をチェックするメソッドで文字列ruby 3.2.3が含まれているかどうかを検証
  its(:stdout) { should match 'ruby 3.2.3' }
end

# ------------------------------------------------------------------------
# bundlerのバージョンは2.4.19であること
# ------------------------------------------------------------------------

# package('bundler'): テスト対象のパッケージを指定
describe package('bundler') do
  # should: テストの期待値を記述するための構文
  # be_installed: bundlerパッケージがインストールされているかどうかをチェック
  # by('gem'): bundlerがRubyGems (gemコマンド) を通じてインストールされていることを確認
  # with_version('2.3.14'): bundlerパッケージのバージョンが2.3.14であることを確認
  it { should be_installed.by('gem').with_version('2.3.14') }
end

# ------------------------------------------------------------------------
# Nginxがインストール済であること
# ------------------------------------------------------------------------

# describe:テストの対象となるリソースや状態を記述するためのキーワード
# package('nginx'): テスト対象のパッケージを指定。packageはシステムにインストールされているソフトウェアパッケージ
describe package('nginx') do
  # should: テストの期待値を記述するための構文
  # be_installedはパッケージがインストールされているかどうかをチェックするメソッド
  it { should be_installed }
end

# ------------------------------------------------------------------------
# Nginxの自動起動設定がenableになっているか
# ------------------------------------------------------------------------

# describe:テストの対象となるリソースや状態を記述するためのキーワード
# service('nginx'): テスト対象のサービスを指定。nginxという名前のサービスが対象。serviceはシステムで実行中のサービス
describe service('nginx') do
  # should: テストの期待値を記述するための構文
  # be_enabled: nginxサービスが有効であることを確認。
  # be_enabledは指定したサービスがシステム起動時に自動で開始されるように設定されているかどうかをチェック
  it { should be_enabled }
end

# ------------------------------------------------------------------------
# ポート80番がリッスンであること
# ------------------------------------------------------------------------

# describe:テストの対象となるリソースや状態を記述するためのキーワード
# port(listen_port80): テスト対象のポート番号を指定。listen_port80は変数で、ここではポート番号80が設定
describe port(listen_port80) do
  # be_listening: 指定されたポートがリッスン状態であることを確認
  # be_listeningはそのポートで接続を待機している状態であることをチェックするメソッド
  # そのポートが開いていて、外部からの接続を受け付けているかどうかを確認
  it { should be_listening }
end

